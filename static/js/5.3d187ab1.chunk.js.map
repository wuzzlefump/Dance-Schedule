{"version":3,"sources":["screens/Todo/style.module.css","screens/Todo/Index.js"],"names":["module","exports","ToDoList","List","tap","list","currentInputValue","set","savedToDoList","JSON","parse","localStorage","getItem","React","className","styles","todoContainer","map","item","index","ToDoItem","value","inputContainer","onChange","e","target","name","onClick","preventDefault","includes","setItem","stringify","save","props","removeValue","onFocus","type"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,cAAgB,+B,kICGlE,SAASC,IAAY,IAAD,EACQC,IAAKC,MAAtCC,EADyB,EACzBA,KAAMC,EADmB,EACnBA,kBAAmBC,EADA,EACAA,IAC3BC,EAC0C,OAA9CC,KAAKC,MAAMC,aAAaC,QAAQ,UAC5BH,KAAKC,MAAMC,aAAaC,QAAQ,UAChC,GAmBN,OALAC,aAAgB,WACd,OACKN,EAAIF,KADgB,OAAlBG,EACSA,EACA,KACf,IAED,gCACE,qBAAKM,UAAWC,IAAOC,cAAvB,SACGX,EAAKY,KAAI,SAACC,EAAMC,GACf,OAAO,cAACC,EAAD,CAAUC,MAAOH,GAAWC,QAGvC,sBAAKL,UAAWC,IAAOO,eAAvB,UACE,uBACEC,SAAU,SAACC,GACTjB,EAAID,kBAAoBkB,EAAEC,OAAOJ,OAEnCK,KAAM,UACNL,MAAOf,IAET,wBACEqB,QAAS,SAACH,IAjCL,SAACA,GAEZ,GADAA,EAAEI,iBACEvB,EAAKwB,SAASvB,GAChB,OAAO,KAEPC,EAAIF,KAAJ,sBAAeA,GAAf,CAAqBC,IACrBK,aAAamB,QACX,QACArB,KAAKsB,UAAL,sBAAmB1B,GAAnB,CAAyBC,MA0BrB0B,CAAKR,IAFT,qBAWR,IAAMJ,EAAW,SAACa,GAAW,IACnBC,EAAgB/B,IAAKC,MAArB8B,YACR,OACE,iCACE,uBACEC,QAAS,WACPD,EAAYD,EAAMZ,QAEpBe,KAAM,aAER,+BAAOH,EAAMZ","file":"static/js/5.3d187ab1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"style_inputContainer__J49bz\",\"todoContainer\":\"style_todoContainer__2JJnm\"};","import * as React from \"react\";\nimport styles from \"./style.module.css\";\nimport { List } from \"../../App\";\n\nexport default function ToDoList() {\n  const { list, currentInputValue, set } = List.tap();\n  const savedToDoList =\n    JSON.parse(localStorage.getItem(\"todos\")) !== null\n      ? JSON.parse(localStorage.getItem(\"todos\"))\n      : [];\n\n  const save = (e) => {\n    e.preventDefault();\n    if (list.includes(currentInputValue)) {\n      return null;\n    } else {\n      set.list = [...list, currentInputValue];\n      localStorage.setItem(\n        \"todos\",\n        JSON.stringify([...list, currentInputValue])\n      );\n    }\n  };\n  React.useEffect(() => {\n    return savedToDoList !== null\n      ? (set.list = savedToDoList)\n      : (set.list = []);\n  }, []);\n  return (\n    <div>\n      <div className={styles.todoContainer}>\n        {list.map((item, index) => {\n          return <ToDoItem value={item} key={index} />;\n        })}\n      </div>\n      <div className={styles.inputContainer}>\n        <input\n          onChange={(e) => {\n            set.currentInputValue = e.target.value;\n          }}\n          name={\"newToDo\"}\n          value={currentInputValue}\n        />\n        <button\n          onClick={(e) => {\n            save(e);\n          }}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n}\nconst ToDoItem = (props) => {\n  const { removeValue } = List.tap();\n  return (\n    <span>\n      <input\n        onFocus={() => {\n          removeValue(props.value);\n        }}\n        type={\"checkbox\"}\n      />\n      <span>{props.value}</span>\n    </span>\n  );\n};\n"],"sourceRoot":""}